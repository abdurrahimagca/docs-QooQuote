{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QooQuote","text":"<p>This is the main page of the documentation. Here you can find all the information you need to get started with the project.</p>"},{"location":"#what-is-qooquote","title":"What is QooQuote?","text":"<p>QooQuote is a project that a social app that allows users share any Quote they like with their friends. It is a simple app that allows users to share their favorite quotes from a movie or a book or a song with their friends. The app is designed to be simple and easy to use. It is a great way to share your favorite quotes with your friends. You can also follow your friends and see what quotes they have shared, and you can like and comment on their quotes.</p>"},{"location":"design/","title":"Design","text":""},{"location":"design/#overview","title":"Overview","text":"<p>Full design can be found in the on Figma. But you may also find the basics in the following sections.</p>"},{"location":"design/#colors","title":"Colors","text":"Name Hex Code Preview Background <code>#101010</code> #101010 Primary <code>#87CEEB</code> #87CEEB Secondary <code>#CDA2FF</code> #CDA2FF Tertiary <code>#CEEB87</code> #CEEB87"},{"location":"design/#typography","title":"Typography","text":"Type Font Family Font Color Example Text Preview UI Inter <code>#FFFFFF</code> The quick brown fox jumps over the lazy dog. #FFFFFF Header Playfair Display <code>#D2D1D1</code> The quick brown fox jumps over the lazy dog. #D2D1D1"},{"location":"development/","title":"Developer guide","text":""},{"location":"development/#introduction","title":"Introduction","text":"<p>This document provides a guide for developers who want to contribute to the QooQuote project. It covers the following topics:</p> <ul> <li>Setting up the development environment</li> <li>Running the project</li> <li>Testing</li> <li>Deployment</li> <li>Contributing</li> </ul>"},{"location":"development/ADR/00ADR/","title":"Architecture Decision Record (ADR) - Proje Mimarisinin Belirlenmesi","text":""},{"location":"development/ADR/00ADR/#teknoloji-ygn","title":"Teknoloji Y\u0131\u011f\u0131n\u0131","text":"<p>Bu projeyi geli\u015ftirmek i\u00e7in a\u015fa\u011f\u0131daki teknoloji y\u0131\u011f\u0131n\u0131 tercih edilmi\u015ftir:  - NestJS  - PostgreSQL  - TypeORM  - GraphQL  - Flutter</p>"},{"location":"development/ADR/00ADR/#neden-bu-teknoloji-ygn","title":"Neden bu teknoloji y\u0131\u011f\u0131n\u0131?","text":"<ul> <li>NestJS: Nest, mod\u00fcler bir mimari sundu\u011fu i\u00e7in \u00f6l\u00e7eklenebilir ve bak\u0131m\u0131 kolayd\u0131r. Geni\u015f bir toplulu\u011fa ve iyi bir dok\u00fcmantasyona sahip olmas\u0131, destek ve kaynak bulmay\u0131 kolayla\u015ft\u0131r\u0131r. GO veya Rust gibi alternatifler olsa da, JavaScript tabanl\u0131 bir y\u0131\u011f\u0131n ekibimiz i\u00e7in daha uygun. Sadece kullan\u0131m\u0131 daha kolay oldu\u011fu i\u00e7in de\u011fil, ayn\u0131 zamanda buluta da\u011f\u0131t\u0131m\u0131 da olduk\u00e7a pratik. Express gibi alternatifler de bu avantajlar\u0131 sunabilir, ancak Nest, uygulamalar\u0131 daha d\u00fczenli bir \u015fekilde geli\u015ftirmemizi sa\u011fl\u0131yor. Ayr\u0131ca GraphQL i\u00e7in yerle\u015fik destek sunmas\u0131, projemiz i\u00e7in b\u00fcy\u00fck bir art\u0131.</li> <li>GraphQL: GraphQL, API'ler i\u00e7in bir sorgu dili ve bu sorgular\u0131 \u00e7al\u0131\u015ft\u0131rmak i\u00e7in bir \u00e7al\u0131\u015fma zaman\u0131d\u0131r. REST'e g\u00f6re daha yava\u015f \u00e7al\u0131\u015fsa da, API'lerle etkile\u015fimde daha esnek ve verimli bir y\u00f6ntem sunar. \u0130stemcilerin yaln\u0131zca ihtiya\u00e7 duyduklar\u0131 verileri talep etmesine olanak tan\u0131r, bu da a\u011f \u00fczerinden ta\u015f\u0131nan veri miktar\u0131n\u0131 azaltabilir. Bu \u00f6zellik, \u00f6zellikle mobil uygulamalarda, bant geni\u015fli\u011finin s\u0131n\u0131rl\u0131 oldu\u011fu durumlarda \u00f6nemlidir. Ayr\u0131ca GraphQL, ger\u00e7ek zamanl\u0131 g\u00fcncellemeler i\u00e7in yerle\u015fik destek sunar, bu da projemiz i\u00e7in bir avantajd\u0131r.</li> <li>PostgreSQL: Di\u011fer t\u00fcm se\u00e7imler de\u011fi\u015ftirilebilir olsa da, PostgreSQL ili\u015fkisel bir veritaban\u0131 i\u00e7in en iyi se\u00e7enektir. Bunun iki temel nedeni var:<ul> <li>JSONB veri t\u00fcr\u00fc sunar, bu da sorgulanabilir ve indekslenebilir. Bu \u00f6zellik, yap\u0131land\u0131r\u0131lmam\u0131\u015f verileri d\u00fczenli bir \u015fekilde saklamam\u0131za olanak tan\u0131r ve projemiz i\u00e7in olduk\u00e7a \u00f6nemlidir.</li> <li>Verileri vekt\u00f6rle\u015ftirme ve arama imkan\u0131 sa\u011flar. Gelecekte i\u00e7erik bazl\u0131 arama yapmam\u0131z gerekebilir ve PostgreSQL bu konuda en iyi se\u00e7enektir.</li> </ul> </li> <li>TypeORM: TypeORM, TypeScript ve JavaScript i\u00e7in bir ORM'dir. Piyasada bir\u00e7ok ORM mevcut ve belki de ORM kullanmak her zaman en iyi \u00e7\u00f6z\u00fcm de\u011fil. Ancak TypeORM, .NET d\u00fcnyas\u0131ndaki EntityFramework gibi, veritaban\u0131yla etkile\u015fim kurman\u0131n pratik bir yolunu sunar. Kullan\u0131m\u0131 kolayd\u0131r ve iyi bir dok\u00fcmantasyona sahiptir. Ayr\u0131ca PostgreSQL i\u00e7in yerle\u015fik deste\u011fi bulunur, bu da projemiz i\u00e7in bir avantajd\u0131r. Not: Yine de RAW SQL kullanmay\u0131 da de\u011ferlendirebiliriz.</li> </ul>"},{"location":"development/ADR/01ADR/","title":"Architecture Decision Record (ADR) - Kimlik Do\u011frulama ve Yetkilendirme","text":""},{"location":"development/ADR/01ADR/#kimlik-dogrulama-ve-yetkilendirme","title":"Kimlik Do\u011frulama ve Yetkilendirme","text":""},{"location":"development/ADR/01ADR/#strateji","title":"Strateji","text":"<ul> <li>AuthZ ve AuthN i\u00e7in JWT kullan\u0131lacak.</li> <li>Hem kullan\u0131c\u0131 giri\u015fi hem yeni kullan\u0131c\u0131 kayd\u0131 i\u00e7in \u015fifresiz bir kimlik do\u011frulama y\u00f6ntemi kullan\u0131lacak.</li> <li>Sosyal medya giri\u015f se\u00e7enekleri (Google, Facebook, vb.) i\u00e7in OAuth2 kullan\u0131lacak.</li> <li>Token kara listeleme i\u00e7in Redis kullan\u0131larak JWT'ye ekstra bir katman eklenecek.</li> </ul>"},{"location":"development/ADR/01ADR/#neden-bu-strateji","title":"Neden bu strateji?","text":"<p>JWT, kimlik do\u011frulama (authN) ve yetkilendirme (authZ) i\u00e7in neredeyse bir standartt\u0131r. Stateless (durumsuz) ve kullan\u0131m\u0131 kolayd\u0131r. Ancak, JWTlar invalid edilememelerinden \u00f6t\u00fcr\u00fc g\u00fcvenlik a\u00e7\u0131\u011f\u0131 olu\u015fturmak veya *her yerden \u00e7\u0131k\u0131\u015f yapmak gibi bir durumu destekleyemezler. Bu sorunlar\u0131 a\u015fmak i\u00e7in Redis kullanarak tokenlar\u0131 saklayabilir ve kullan\u0131c\u0131 \u00e7\u0131k\u0131\u015f yapt\u0131\u011f\u0131nda veya token s\u00fcresi doldu\u011funda kara listeye al\u0131nmal\u0131d\u0131r. Bu \u015fekilde, tokenlar\u0131 iptal etme yetene\u011fi olan bir durumsuz kimlik do\u011frulama sistemi olu\u015fturulur. \u0130\u015fte bu nedenle, kimlik do\u011frulama i\u00e7in JWT ve token y\u00f6netimi i\u00e7in Redis birlikte kullan\u0131lacakt\u0131r.</p> <pre><code>async validate(payload: any) {\n    // ...\n    if (blockInfo) {\n        const info = JSON.parse(blockInfo);\n        throw new UnauthorizedException(`Token blocked (${info.reason})`);\n    }\n    // ...\n}\n</code></pre> <ul> <li>\u015eifresiz kimlik do\u011frulama, kullan\u0131c\u0131 kimlik do\u011frulamas\u0131 i\u00e7in modern bir yakla\u015f\u0131md\u0131r ve g\u00fcvenli\u011fi ve kullan\u0131c\u0131 deneyimini art\u0131r\u0131r. Karma\u015f\u0131k \u015fifreleri hat\u0131rlama ihtiyac\u0131n\u0131 ortadan kald\u0131rarak \u015fifreyle ilgili g\u00fcvenlik a\u00e7\u0131klar\u0131n\u0131 azaltmakta.  Bu y\u00fczden ba\u015flang\u0131\u00e7ta Google ile giri\u015f yapmak tercih edilecektir. Kullan\u0131c\u0131 Google ile giri\u015f yapt\u0131\u011f\u0131nda, veritaban\u0131nda bir kullan\u0131c\u0131 olu\u015fturulacak ve \u015fifresiz kimlik do\u011frulama kullan\u0131lacakt\u0131r. Kullan\u0131c\u0131 daha sonra \u015fifre belirleyebilir ve \u015fifreli kimlik do\u011frulama yapabilir.</li> </ul> <pre><code>@Injectable()\nexport class GoogleStrategy extends PassportStrategy(Strategy, 'google') {\n    constructor(private authService: AuthService) {\n        super({\n            // ...\n        });\n    }\n\n    async validate(\n        accessToken: string,\n        refreshToken: string,\n        profile: any,\n        done: VerifyCallback,\n    ): Promise&lt;any&gt; {\n        const result = GoogleProfileSchema.safeParse(profile);\n        if (!result.success) {\n            return done(result.error, false);\n        }\n        const { id, emails } = result.data;\n        const email = emails[0].value;\n        const jwt = await this.authService.validateOrCreateUser(\n            id,\n            email,\n            'google',\n        );\n        return done(null, {\n            tokens: jwt,\n        });\n    }\n}\n</code></pre> <p>Bu \u015fekilde, kullan\u0131c\u0131 Google ile giri\u015f yapsa bile, veritaban\u0131m\u0131zda bir kullan\u0131c\u0131 olu\u015fturabilir ve geri kalan zaman i\u00e7in \u015fifresiz kimlik do\u011frulama kullanabiliriz.</p> <pre><code>async validateOrCreateUser(\n    providerId: string,\n    email: string,\n    provider: string,\n): Promise&lt;{\n    accessToken: string;\n    refreshToken: string;\n}&gt; {\n    let auth = await this.repository.findOne({\n        where: { email, provider, providerId },\n        relations: ['user'],\n    });\n\n    if (!auth) {\n        const user = this.userRepository.create({\n            username: email.split('@')[0],\n        });\n\n        await this.userRepository.save(user);\n\n        auth = this.repository.create({\n            email,\n            provider,\n            providerId,\n            user,\n        });\n\n        await this.repository.save(auth);\n    }\n    const accessToken = this.jwtService.sign(\n        {\n            uid: auth.user.id,\n            email: auth.email,\n            username: auth.user.username,\n            jti: randomUUID(),\n        },\n        {\n            expiresIn: '10m',\n        },\n    );\n    const refreshToken = this.jwtService.sign(\n        {\n            uid: auth.user.id,\n            email: auth.email,\n            username: auth.user.username,\n            providerId: auth.providerId,\n            provider: auth.provider,\n            jti: randomUUID(),\n        },\n        {\n            expiresIn: '7d',\n        },\n    );\n\n    return { accessToken, refreshToken };\n}\n</code></pre>"},{"location":"development/ADR/01ADR/#nasl","title":"Nas\u0131l?","text":"<p>Web \u00fczerinde bir geli\u015ftirme yap\u0131l\u0131yor olsa idi elbette Set-Cookie cevab\u0131 ile eklenmi\u015f bir HttpOnly \u00e7erezi ile kimlik do\u011frulama yap\u0131labilirdi. Ancak mobil uygulama \u00fczerinde \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z i\u00e7in bu y\u00f6ntem ge\u00e7erli de\u011fil. Mobil uygulama \u00fczerinde OAuth2 giri\u015flerinin genelinde bir query parametresi ile token d\u00f6n\u00fclmekte oldu\u011fu i\u00e7in i\u015f bu y\u00f6nde ilerleyece\u011fiz.  Ancak, bu durumda yine de refresh ve access tokenlar\u0131 a\u00e7\u0131k\u00e7a query parametreleri ile d\u00f6nd\u00fcrmek pek de rahat hissettiren bir y\u00f6ntem olmayacakt\u0131r. Bu y\u00fczden</p> <pre><code>sequenceDiagram\n    participant Client\n    participant Server\n    participant Redis\n\n    Client-&gt;&gt;Server: /auth/google\n    Server-&gt;&gt;Redis: Generate token and save with auth code\n    Server--&gt;&gt;Client: Return auth code\n\n    Client-&gt;&gt;Server: /auth/google/callback?code=auth_code\n    Server-&gt;&gt;Redis: Retrieve token using auth code\n    Redis--&gt;&gt;Server: Return token\n    Server--&gt;&gt;Client: Return token</code></pre>"},{"location":"development/ADR/02ADR/","title":"Architecture Decision Record (ADR) - Post Database ve API Modeli","text":""},{"location":"development/ADR/02ADR/#post-database-ve-api-modeli","title":"Post Database ve API Modeli","text":"<p>Postlar i\u00e7in veritaban\u0131nda kullan\u0131lacak model:  - Gerekli Post t\u00fcrlerini kapsamal\u0131  - Frontend i\u00e7in gerek ve yeter bir derecede veri sa\u011flamal\u0131 -  Kullanc\u0131lar\u0131n tercihleri ile rahat\u00e7a vekt\u00f6rle\u015ftirilebilmeli ve aranabilmeli - Kullan\u0131c\u0131lar\u0131n tercihlerine g\u00f6re filtrelenebilmeli - Gere\u011finden fazla veri i\u00e7ermemeli - Gere\u011finden az veri i\u00e7ermemeli ve  Post API'si : -  Kullan\u0131c\u0131lar\u0131n postlar\u0131 aramas\u0131na olanak tan\u0131mal\u0131 - Kullan\u0131c\u0131lar\u0131n postlar\u0131 filtrelemesine olanak tan\u0131mal\u0131 - \u0130stemcinin arkada\u015flar\u0131 taraf\u0131ndan payla\u015f\u0131lan postlar\u0131 g\u00f6rmesine olanak tan\u0131mal\u0131, ki bunlar gizli olacaklard\u0131r  - Kullan\u0131c\u0131lar\u0131n kendi postlar\u0131n\u0131 g\u00f6rmesine olanak tan\u0131mal\u0131 -  Frontend'in tek bir sorgu ile post yaratabilmesine olanak tan\u0131mal\u0131 - Olas\u0131 hatalar\u0131 m\u00fcmk\u00fcn olan en \u00f6nce bir yerde yakalayabilmeli</p> <p>T\u00fcm bu gereksinimlerin ve hen\u00fcz hesap edilememi\u015f bir \u00e7ok gereksinimin kar\u015f\u0131lanmas\u0131 elbette hatr\u0131 say\u0131l\u0131r bir zaman alacakt\u0131r. Bu y\u00fczden bu ADR' s\u0131k s\u0131k de\u011fi\u015fecek ve g\u00fcncellenecektir. Ancak bu a\u015famada database:</p> <p></p> <p>ve API:   ```graphql type Mutation {   .   .   createPost(input: CreatePostInput!): Post!   .   . } input CreatePostInput {   image: String!   title: String!   description: String   postText: String!   textInformation: TextResourceInput   backgroundInformation: BackgroundResourceInput   authorId: String!   isFriendsOnly: Boolean   metaData: [MetaDataInput!] = [] } <pre><code>`image` alan\u0131 \u015fuanda zorunlu ve Base64 format\u0131nda bir string beklemekte\n```js\nconst BASE64_REGEX = /^data:image\\/(jpeg|png|webp);base64,([A-Za-z0-9+/=])+$/;\nconst MAX_BASE64_SIZE = 10 * 1024 * 1024;\n\nconst validateBase64Image = (base64: string) =&gt; {\n  if (!BASE64_REGEX.test(base64)) {\n    return false;\n  }\n\n  const base64Data = base64.replace(/^data:.*?;base64,/, '');\n  const buffer = Buffer.from(base64Data, 'base64');\n\n  if (buffer.length &gt; MAX_BASE64_SIZE) {\n    return false;\n  }\n\n  return true;\n};\n</code></pre></p> <p>image zorunlu olmayabilir?</p> <p><code>Image</code> string base64 al\u0131n\u0131p</p> <p><pre><code> const { image, ...postData } = createPostDto;\n\n      const { buffer, contentType } = await this.processImage(image);\n      const fileExtension = contentType.split('/')[1];\n      const key = `posts/${userId}/${randomUUID()}.${fileExtension}`;\n\n      const { publicUrl } = await this.bucketService.uploadFile(\n        key,\n        buffer,\n        contentType,\n      );\n</code></pre> i\u015flendikten sonra Object Storage'da tutulur. </p> <p><code>textInformation</code> ve <code>backgroundInformation</code> alanlar\u0131, kullan\u0131c\u0131n\u0131n postu olu\u015ftururken eklemek istedi\u011fi metin ve arka plan bilgilerini temsil eder. Bu alanlar iste\u011fe ba\u011fl\u0131d\u0131r ve kullan\u0131c\u0131n\u0131n tercihlerine g\u00f6re doldurulabilir. <code>metaData</code> ise postun i\u00e7eri\u011fi hakk\u0131nda ek bilgiler sa\u011flayan bir dizi nesne i\u00e7erir. Bu yap\u0131, kullan\u0131c\u0131lar\u0131n postlar\u0131n\u0131 daha iyi organize etmelerine ve arama i\u015flemlerini kolayla\u015ft\u0131rmalar\u0131na olanak tan\u0131r.</p>"},{"location":"development/ADR/02ADR/#post-icerik-ve-sahiplik","title":"Post \u0130\u00e7erik ve Sahiplik","text":"<ul> <li>Postlar standart bir i\u00e7erik yap\u0131s\u0131na sahip de\u011fil. Ancak database ve API i\u015f bu d\u00fczeni sa\u011flayacak kadar esnek olmal\u0131.</li> <li>Postlar iki t\u00fcr bir sahipli\u011fi i\u00e7erecek: postu olu\u015fturan kullan\u0131c\u0131 ve sanat\u00e7\u0131, senarist, yazar, \u015fark\u0131c\u0131, y\u00f6netmen vb. Bu sahiplik t\u00fcrleri aras\u0131nda bir ayr\u0131m yap\u0131lmas\u0131 gerekecek. <ul> <li>Postlar, kullan\u0131c\u0131lar\u0131n arkada\u015flar\u0131 taraf\u0131ndan payla\u015f\u0131lan i\u00e7erikleri gizli ise dahi g\u00fcvenli \u015fekilde g\u00f6rmesine olanak tan\u0131mal\u0131d\u0131r. Bu, kullan\u0131c\u0131lar\u0131n gizliliklerini korurken ayn\u0131 zamanda sosyal etkile\u015fimlerini art\u0131r\u0131r.</li> </ul> </li> </ul>"},{"location":"development/ADR/02ADR/#sahiplik-senarist-yazar-sarkc-yonetmen-vb","title":"Sahiplik (senarist,  yazar, \u015fark\u0131c\u0131, y\u00f6netmen vb.)","text":"<p>Burada bir <code>Y</code> y\u00f6netmen, s\u00f6zgelimi, bir \u015fark\u0131 sahibi de ise sistem bu t\u00fcr bir ili\u015fkiyi dahi kavrayabilecek ve bu y\u00f6netmenin <code>X</code> filminden bir al\u0131nt\u0131 ile at\u0131lan post ve <code>Y</code> \u015fark\u0131s\u0131ndan al\u0131nt\u0131 ile at\u0131lan postun ayn\u0131 <code>Y</code> ki\u015fisine ait oldu\u011funu anlamal\u0131 ki bu daima <code>Y</code> ki\u015fisinin eserlerinden olu\u015fan postlara ilgi duyan bir kullanc\u0131n\u0131n davran\u0131\u015f\u0131n\u0131 anlamak i\u00e7in bir veri noktas\u0131 sunabilsin. Bu ili\u015fki i\u00e7in t\u00fcm ***senarist, y\u00f6netmen, yazar vb ki\u015filerine <code>Contributor</code> diyece\u011fiz ve t\u00fcm bir i\u00e7eriklerin bir veya daha fazla contributor'\u00fc olabilece\u011fini varsayaca\u011f\u0131z. Bu durumda bir postun birden fazla contributor'\u00fc olabilir ve bu contributor'ler aras\u0131nda bir ili\u015fki kurulabilir. Bu ili\u015fki, postun i\u00e7eri\u011fi ve t\u00fcr\u00fcne ba\u011fl\u0131 olarak de\u011fi\u015febilir. \u00d6rne\u011fin, bir film postu i\u00e7in y\u00f6netmen ve senarist contributor'leri olabilirken, bir m\u00fczik postu i\u00e7in \u015fark\u0131c\u0131 ve s\u00f6z yazar\u0131 contributor'leri olabilir. Bu t\u00fcr bir ili\u015fki, kullan\u0131c\u0131lar\u0131n i\u00e7erikleri daha iyi anlamalar\u0131na ve arama i\u015flemlerini kolayla\u015ft\u0131rmalar\u0131na olanak tan\u0131r.</p> <p>Ancak bu t\u00fcr bir ili\u015fki i\u00e7in bir ki\u015finin yaln\u0131z tek bir kez ve ancak tek bir kez var olan bir nesne olabilmesini sa\u011flamak i\u00e7in bir \u00f6zel <code>identifier</code> kullanmal\u0131y\u0131z. Bu \u00f6yle olmal\u0131 ki bir ki\u015finin en az \u00f6zelli\u011fi o ki\u015fiyi di\u011fer bir ki\u015filer nesnesinden tam olarak ay\u0131rs\u0131n. Burada akla  - \u0130sim Soyisim - Government ID - E-posta gibi kimi \u00f6zellikler gelse de bu \u00f6zelliklerin b\u00f6ylesi bir sistemde tutulmas\u0131 ula\u015f\u0131labilmesi ne ger\u00e7ek\u00e7i ne de sebepli. Bu y\u00fczden sistem i\u00e7ersinde iki farkl\u0131 ki\u015finin ayn\u0131 \u00fclkede ayn\u0131 g\u00fcn ay y\u0131l i\u00e7ersinde ayn\u0131 isim soyisim ile do\u011fmad\u0131\u011f\u0131n\u0131 varsayaca\u011f\u0131z. Bu ikiz karde\u015fler i\u00e7in ayn\u0131 isim verildi ise ihlal olacakt\u0131r, ancak bu durum \u015fuanl\u0131k g\u00f6z ard\u0131 edilebilecek kadar nadir. Bu y\u00fczden bu t\u00fcr bir sistemde bir ki\u015finin <code>identifier</code>\u0131 \u015fu \u015fekilde tan\u0131mlanabilir: <pre><code>const identifier = `${firstName.toLowerCase()}_${lastName.toLowerCase()}_${country}_${dateOfBirth}`;\n</code></pre></p> <p>Bu bize bir post olu\u015fumunda bizim taraf\u0131m\u0131zdan sa\u011flanan bir data kullanma zorunlulu\u011fu getiriyor. Bunu \u015fimdilik planlanm\u0131\u015f bir \u00f6zellik olarak b\u0131rak\u0131yoruz. </p> <p>## Post Gizlili\u011fi</p> <p>Bir post e\u011fer postu olu\u015fturan kullan\u0131c\u0131 taraf\u0131ndan gizli olarak i\u015faretlenebilir -friends only- veya hesap gizli -friends only- olarak i\u015faretlenebilir. Postun bir tekil gizlili\u011fi basit bir query ile \u00e7\u00f6z\u00fclebilir:  <code>SQL SELECT * FROM posts WHERE isFriendsOnly = false;</code> ancak kullanc\u0131n\u0131n gizli bir hesab\u0131 var ise ve bu kullan\u0131c\u0131 bir post olu\u015fturmu\u015f ise bu postun gizlili\u011fi en yal\u0131n bir \u015fekilde: <code>js async findAll(skip = 0, take = 10): Promise&lt;Post[]&gt; {     return this.repository.find({       skip,       take,       where: {         isFriendsOnly: false,         author: {           isPrivate: false,         },       },       order: { createdAt: 'DESC' },       relations: ['author'],     });   }</code></p> <p>Planned Feature:</p> <p>Post API bir kullan\u0131c\u0131 i\u00e7in \u00f6zel bir related posts olu\u015fturup d\u00f6nebilecek \u015fekilde olmal\u0131d\u0131r bu cache ve CDN ile de desteklenmelidir.</p>"},{"location":"development/ADR/03ADR/","title":"03ADR","text":"<p># Architecture Decision Record (ADR) -  Kullan\u0131c\u0131 Ayarlar\u0131 ve Tercihleri</p> <ul> <li>Kullan\u0131c\u0131 bir postuna dair neredeyse her \u015feyi ayarlayabilmeli kimlerin yorum yapabilece\u011fi, kimlerin be\u011fenebilece\u011fi, kimlerin g\u00f6rebilece\u011fi gibi</li> <li>Kullan\u0131c\u0131 bir postuna dair neredeyse her \u015feyi ayarlayabilmeli kimlerin \u00f6neri alabilece\u011fi, kimlerin \u00f6neri almayaca\u011f\u0131 gibi</li> <li>Kullan\u0131c\u0131 bir postuna dair neredeyse her \u015feyi tercih edebilmeli \u00f6rne\u011fin kimseye \u00f6nerilmemesi, kimseyle payla\u015f\u0131lmamas\u0131n\u0131 vb</li> <li>Kullan\u0131c\u0131 profiline dair neredeyse her \u015feyi ayarlayabilmeli kimlerin \u00f6neri alabilece\u011fi, kimlerin \u00f6neri almayaca\u011f\u0131 gibi</li> <li>Kullan\u0131c\u0131 profiline dair neredeyse her \u015feyi ayarlayabilmeli kimlerin \u00f6neri alabilece\u011fi, kimlerin \u00f6neri almayaca\u011f\u0131 gibi</li> <li>Kullan\u0131c\u0131 profiline dair neredeyse her \u015feyi tercih edebilmeli \u00f6rne\u011fin kimseye \u00f6nerilmemesi, kimseyle payla\u015f\u0131lmamas\u0131n\u0131 vb</li> </ul>"},{"location":"development/ADR/03ADR/#user-settings-entity","title":"User Settings Entity","text":"<p>Bu entity, farkl\u0131la\u015facakt\u0131r.</p>"},{"location":"development/ADR/03ADR/#user-preferences","title":"User Preferences","text":"<ul> <li>Kullanc\u0131n\u0131n davran\u0131\u015flar\u0131 ve ki\u015fiden bizzatihi al\u0131nan verilerle olu\u015fturulacak bir modeldir.</li> <li>Kullanc\u0131n\u0131n tercihleri ve davaran\u0131\u015flar\u0131 daimi olarak g\u00fcncellenmelidir.</li> <li>Kullan\u0131c\u0131lar\u0131n tercihleri ve davran\u0131\u015flar\u0131, kullan\u0131c\u0131lar\u0131n etkile\u015fimde bulundu\u011fu i\u00e7eriklerin t\u00fcr\u00fcn\u00fc belirlemek i\u00e7in kullan\u0131lacakt\u0131r.</li> </ul> <p>\u015euanda bu mod\u00fcl geli\u015ftirilme a\u015famas\u0131ndad\u0131r.</p>"},{"location":"development/ADR/04ADR/","title":"04ADR","text":""},{"location":"development/ADR/04ADR/#architecture-decision-record-adr-post-creation-refactor","title":"Architecture Decision Record (ADR) - Post Creation Refactor","text":"<ul> <li>Post yarat\u0131m\u0131nda userID ayr\u0131ca istenmesine gerek yok. Kullan\u0131c\u0131 zaten oturum ile jwt token g\u00f6nderiyor.</li> </ul> <p>### Validation</p> <ul> <li>Zod validasyonu gereksiz olabilir zira GQL'de zaten validasyon yap\u0131l\u0131yor. Ancak, Zod validasyonu, GraphQL'den ba\u011f\u0131ms\u0131z olarak kullan\u0131labilir ve bu nedenle yararl\u0131 olabilir.</li> </ul>"},{"location":"development/api/00env/","title":"First Time Setup","text":""},{"location":"development/api/00env/#setting-up-your-environment","title":"Setting Up Your Environment","text":""},{"location":"development/api/00env/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker</li> <li>Bash/Zsh</li> <li>Git</li> <li>Browser (optional)</li> </ul>"},{"location":"development/api/00env/#getting-started","title":"Getting Started","text":"<ol> <li> <p>Clone the repository</p> <pre><code>git clone https://github.com/abdurrahimagca/qoo-quote-be.git\n</code></pre> </li> <li> <p>Change directory to the cloned repository</p> <pre><code>cd qoo-quote-be\n</code></pre> </li> <li> <p>Create a <code>.env.development</code> file in the root directory of the project and add the environment variables from the <code>.env.example</code> file.</p> </li> <li> <p>Make the <code>entrypoint.sh</code> script executable and run the following commands to start the application:</p> <pre><code>chmod +x ./entrypoint.sh\n./entrypoint.sh dev:build\n./entrypoint.sh dev\n</code></pre> </li> </ol> <p>If the application is running successfully, you should be able to visit the following URL in your browser to see the GraphQL playground:</p> <p>http://local.qq.api.com/graphql</p>"},{"location":"development/api/01basics/","title":"Basics","text":"<p>When working with the API, you will need to know which endpoints are available and how to interact with them. This section provides an overview of the basic API functionality and how to use it effectively.</p>"},{"location":"development/api/01basics/#endpoints","title":"Endpoints","text":""},{"location":"development/api/01basics/#authentication","title":"Authentication","text":"<p>The only REST endpoint is <code>auth/google</code> which is used for Google OAuth2 authentication. Since this is challenging to make it work with graphql, we have decided to use REST for this endpoint. This endpoint is used to authenticate users using their Google account. Ones authenticated, the user will be redirected to the frontend with a JWT token in the URL. You can ask for spesific callBackURL by adding `?callbackUri=YOUR_URL</p> <p>Try it out:</p> <p>[http://local.qq.api.com/auth/google?callbackUri=https://homelab-kaleici.space] (http://local.qq.api.com/auth/google?callbackUri=https://homelab-kaleici.space)</p> <p>You dont need to be authenticated to use this endpoint. But this is the only endpoint that you can use without authentication. Rest of it it needs a api key.</p> <pre><code>curl -X GET \"any\" -H \"qq-api-key: YOUR_API_KEY\"\n</code></pre>"},{"location":"development/api/01basics/#graphql","title":"GraphQL","text":"<p>The GraphQL endpoint is <code>/graphql</code> which is used for all other API requests. This endpoint is used to query and mutate data in the system. You can use tools like GraphiQL or Postman to interact with the API. But you dont need to set a tool to use it. You can use it directly from the browser. </p> <p>Try it out: http://local.qq.api.com/graphql</p>"},{"location":"development/diagrams/0.system/","title":"System Architecture","text":"<p>This project is still in development and may change in the future. Be sure to check the latest version of the document.</p>"},{"location":"development/diagrams/0.system/#authentication","title":"Authentication","text":""},{"location":"development/diagrams/0.system/#creating-a-new-user","title":"Creating a new user","text":"<p>Users can create a new account by providing their email and password.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Enter email and password\n    Frontend-&gt;&gt;Backend: Send sign-up request\n    Backend-&gt;&gt;Backend: Validate input\n    Backend-&gt;&gt;Backend: Hash password\n    Backend-&gt;&gt;DB: Save user data (email, hashed password)\n    DB--&gt;&gt;Backend: Confirmation\n    Backend--&gt;&gt;Frontend: Sign-up successful\n    Frontend--&gt;&gt;User: Account created</code></pre> <p>Users can also sign up using their Spotify or Pinterest account.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant OAuth as Spotify/Pinterest\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Select Spotify/Pinterest sign-up\n    Frontend-&gt;&gt;Backend: Send sign-up request\n    Backend-&gt;&gt;OAuth: Request user authentication\n    OAuth--&gt;&gt;Backend: Return user data (ID, email, etc.)\n    Backend-&gt;&gt;DB: Save user data (OAuth provider details)\n    DB--&gt;&gt;Backend: Confirmation\n    Backend--&gt;&gt;Frontend: Sign-up successful\n    Frontend--&gt;&gt;User: Account created</code></pre>"},{"location":"development/diagrams/0.system/#logging-in","title":"Logging in","text":"<p>At this point, we do not plan to use an external auth provider like Auth0, but we might consider it in the future. Either way, the architecture would remain the same, with the only difference being the external provider handling the authentication process.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n    participant JWT as JWT Service\n\n    User-&gt;&gt;Frontend: Enter email and password\n    Frontend-&gt;&gt;Backend: Send login request\n    Backend-&gt;&gt;DB: Validate user credentials\n    DB--&gt;&gt;Backend: Return user data (if valid)\n    Backend-&gt;&gt;JWT: Generate JWT (Access + Refresh tokens)\n    JWT--&gt;&gt;Backend: Return tokens\n    Backend--&gt;&gt;Frontend: Login successful (Send tokens)\n    Frontend--&gt;&gt;User: Logged in\n\n    Note over Frontend, User: Frontend stores tokens securely (e.g., HTTP-only cookies)</code></pre> <p>Nowadays, the most common way to handle authentication is by using JWT (JSON Web Tokens). This is a secure way to authenticate users and keep them logged in. The frontend stores the JWT tokens securely (e.g., in HTTP-only cookies) and sends them with every request to the backend. The backend then verifies the tokens and allows access to the requested resources if the tokens are valid. It is common to make users log in again after a certain period of inactivity, or when the access token expires. In this case, the frontend can use the refresh token to get a new access token without the user having to log in again.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant JWT as JWT Service\n\n    User-&gt;&gt;Frontend: Make an API request\n    Frontend-&gt;&gt;Backend: Send request with Access Token\n    Backend-&gt;&gt;JWT: Validate Access Token\n    alt Token is valid\n        JWT--&gt;&gt;Backend: Token valid\n        Backend--&gt;&gt;Frontend: Process API request\n        Frontend--&gt;&gt;User: Return response\n    else Token is invalid or expired\n        JWT--&gt;&gt;Backend: Token invalid\n        Backend-&gt;&gt;Frontend: Request token refresh\n        Frontend-&gt;&gt;Backend: Send Refresh Token\n        Backend-&gt;&gt;JWT: Validate and issue new tokens\n        JWT--&gt;&gt;Backend: Return new Access and Refresh tokens\n        Backend--&gt;&gt;Frontend: New tokens issued\n        Frontend-&gt;&gt;Backend: Retry API request with new Access Token\n        Backend--&gt;&gt;Frontend: Process request and return response\n        Frontend--&gt;&gt;User: Return response\n    end</code></pre>"},{"location":"development/diagrams/0.system/#posts","title":"Posts","text":""},{"location":"development/diagrams/0.system/#creating-a-new-post","title":"Creating a new post","text":"<p>Users can create new posts. They can add a title, description, and tags to their post. They can also add images and videos to their post.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Create post request (tag, post_text, media, public, etc.)\n    Frontend-&gt;&gt;Backend: Send post payload\n    Backend-&gt;&gt;Backend: Validate payload (e.g., required fields)\n    alt Payload valid\n        Backend-&gt;&gt;DB: Store post data\n        DB--&gt;&gt;Backend: Confirm post stored\n        Backend--&gt;&gt;Frontend: Return success response (post ID, etc.)\n        Frontend--&gt;&gt;User: Post created successfully\n    else Payload invalid\n        Backend--&gt;&gt;Frontend: Return error response (validation failed)\n        Frontend--&gt;&gt;User: Display error message\n    end</code></pre>"},{"location":"development/diagrams/0.system/#reposting","title":"Reposting","text":"<p>Users can repost content they find interesting, similar to retweeting.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Click repost on a post\n    Frontend-&gt;&gt;Backend: Send repost request (original post ID)\n    Backend-&gt;&gt;DB: Create repost entry\n    DB--&gt;&gt;Backend: Confirm repost stored\n    Backend-&gt;&gt;DB: Update original post metrics\n    DB--&gt;&gt;Backend: Confirm metrics updated\n    Backend--&gt;&gt;Frontend: Return success response\n    Frontend--&gt;&gt;User: Repost successful</code></pre>"},{"location":"development/diagrams/0.system/#deleting-a-post","title":"Deleting a post","text":"<p>Users can delete their own posts.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Request post deletion\n    Frontend-&gt;&gt;Backend: Send delete request\n    Backend-&gt;&gt;Backend: Verify user ownership\n    alt User owns post\n        Backend-&gt;&gt;DB: Mark post as deleted\n        DB--&gt;&gt;Backend: Confirm deletion\n        Backend--&gt;&gt;Frontend: Return success response\n        Frontend--&gt;&gt;User: Post deleted successfully\n    else User doesn't own post\n        Backend--&gt;&gt;Frontend: Return error response\n        Frontend--&gt;&gt;User: Permission denied\n    end</code></pre>"},{"location":"development/diagrams/0.system/#archiving-a-post","title":"Archiving a post","text":"<p>Users can archive posts to hide them from their public profile while keeping them for personal reference.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Request post archive\n    Frontend-&gt;&gt;Backend: Send archive request\n    Backend-&gt;&gt;Backend: Verify user ownership\n    alt User owns post\n        Backend-&gt;&gt;DB: Update post status to archived\n        DB--&gt;&gt;Backend: Confirm archive status\n        Backend--&gt;&gt;Frontend: Return success response\n        Frontend--&gt;&gt;User: Post archived successfully\n    else User doesn't own post\n        Backend--&gt;&gt;Frontend: Return error response\n        Frontend--&gt;&gt;User: Permission denied\n    end</code></pre>"},{"location":"development/diagrams/0.system/#feed","title":"Feed","text":"<p>The core of an app like QooQuote is the feed. This is where users can see posts from other users. The feed can be filtered by tags, and users can like and comment on posts. The feed is a complex system that requires a lot of work to get right. We are planning to use a cumulative filtering system to show the posts to the user. This means that we will filter the posts by tags, and then by the user's preferences. This way, the user will see the most relevant posts first.</p> <pre><code>sequenceDiagram\n    participant User as User\n    participant Frontend as Frontend\n    participant Backend as Backend\n    participant RecoSystem as Recommendation System\n    participant DB as Database\n\n    User-&gt;&gt;Frontend: Request recommendations\n    Frontend-&gt;&gt;Backend: Forward recommendation request\n    Backend-&gt;&gt;RecoSystem: Fetch personalized recommendations\n    RecoSystem-&gt;&gt;DB: Query user data and preferences\n    DB--&gt;&gt;RecoSystem: Return user data and preferences\n    RecoSystem-&gt;&gt;DB: Query recommendation data (e.g., posts, tags, media)\n    DB--&gt;&gt;RecoSystem: Return relevant data\n    RecoSystem--&gt;&gt;Backend: Return generated recommendations\n    Backend--&gt;&gt;Frontend: Send recommendations to frontend\n    Frontend--&gt;&gt;User: Display recommendations</code></pre>"},{"location":"development/diagrams/0.system/#the-algorithm","title":"The Algorithm","text":"<p>The recommendation system is the core of the feed. It is responsible for generating personalized recommendations for each user. The system uses a combination of collaborative filtering and content-based filtering to generate recommendations. Inspired by Twitter's recommendation system, we will use a hybrid approach to generate recommendations.</p> <p></p> <p>Since this system is too complex for a short period of time, we will start with a simple recommendation system that will generate recommendations based on the user's preferences. We will use a simple collaborative filtering algorithm to generate recommendations using pg-vector.</p> <pre><code>graph TD\n    A[User Request] --&gt; B[Backend Recommendation Endpoint]\n    B --&gt; C[Fetch User Preferences]\n    B --&gt; D[Fetch User Embedding via pg-vector]\n    C --&gt; E[Apply Cumulative Filtering]\n    D --&gt; F[Apply Content-Based Filtering]\n    E --&gt; G[Combine &amp; Rank Hybrid Approach]\n    F --&gt; G\n    G --&gt; H[Final Recommendations]</code></pre> and the pg-vector flow looks like this  <pre><code>sequenceDiagram\n    participant CL as Client (e.g., psql or app)\n    participant PG as PostgreSQL\n    participant PV as pg-vector Extension\n\n    CL-&gt;&gt;PG: SELECT * FROM posts&lt;br&gt;ORDER BY embedding &lt;-&gt; query_embedding&lt;br&gt;LIMIT 5\n    PG-&gt;&gt;PV: Calculate vector similarity\n    PV--&gt;&gt;PG: Return sorted results\n    PG--&gt;&gt;CL: Top matching rows\n</code></pre>"},{"location":"development/diagrams/1.data/","title":"Database","text":"<p>We will use PSQL for the database.</p> <p>This project is still in development and may change in the future. Be sure to check the latest version of the document.</p>"},{"location":"development/diagrams/1.data/#schema","title":"Schema","text":"<pre><code>erDiagram\n    %% ------------------\n    %%      USERS\n    %% ------------------\n    USERS {\n        int       id PK\n        string    email\n        string    passwordHash\n        string    displayName\n        datetime  createdAt\n        datetime  updatedAt\n    }\n\n    %% ------------------\n    %%      POSTS\n    %% ------------------\n    POSTS {\n        int       id PK\n        int       userId FK \"references USERS(id)\"\n        int       genreId FK \"references GENRES(id)\" \n        string    quoteText\n        string    mediaUrl\n        boolean   isPublic\n        boolean   isArchived\n        datetime  createdAt\n        datetime  updatedAt\n    }\n\n    %% ------------------\n    %%      GENRES\n    %% ------------------\n    GENRES {\n        int       id PK\n        string    genreName\n        string    description\n    }\n\n    %% ------------------\n    %%      TAGS\n    %% ------------------\n    TAGS {\n        int       id PK\n        string    tagName\n    }\n\n    %% ------------------\n    %%      POST_TAGS\n    %% ------------------\n    POST_TAGS {\n        int       postId FK \"references POSTS(id)\"\n        int       tagId  FK \"references TAGS(id)\"\n        %% optionally add a composite PK of (postId, tagId) \n        datetime  createdAt\n    }\n\n    %% ------------------\n    %%      COMMENTS\n    %% ------------------\n    COMMENTS {\n        int       id PK\n        int       userId FK \"references USERS(id)\"\n        int       postId FK \"references POSTS(id)\"\n        string    commentText\n        datetime  createdAt\n        datetime  updatedAt\n    }\n\n    %% ------------------\n    %%      LIKES\n    %% ------------------\n    LIKES {\n        int       id PK\n        int       userId FK \"references USERS(id)\"\n        int       postId FK \"references POSTS(id)\"\n        datetime  createdAt\n    }\n\n    %% ------------------\n    %%      REPOSTS\n    %% ------------------\n    REPOSTS {\n        int       id PK\n        int       userId FK \"references USERS(id)\"\n        int       originalPostId FK \"references POSTS(id)\"\n        datetime  createdAt\n    }\n\n    %% ------------------\n    %%      FOLLOWS\n    %% ------------------\n    FOLLOWS {\n        int       followerId FK \"references USERS(id)\"\n        int       followedId FK \"references USERS(id)\"\n        datetime  createdAt\n        %% Add a composite PK if desired (followerId, followedId)\n    }\n\n    %% ------------------\n    %%  USER_PREFERENCES\n    %% ------------------\n    USER_PREFERENCES {\n        int       id PK\n        int       userId FK \"references USERS(id)\"\n        string    preferenceKey\n        string    preferenceValue\n        datetime  createdAt\n        datetime  updatedAt\n    }\n\n    %% ------------------\n    %%    FRIENDSHIPS\n    %% ------------------\n    FRIENDSHIPS {\n        int       id PK\n        int       requestorUserId FK \"references USERS(id)\"\n        int       acceptorUserId FK \"references USERS(id)\"\n        string    status\n        datetime  createdAt\n        datetime  updatedAt\n    }\n\n    %% ------------------\n    %%    RELATIONSHIPS\n    %% ------------------\n\n    %% 1 user can create many posts\n    USERS ||--o{ POSTS : \"creates\"\n\n    %% 1 user can have many comments; 1 comment belongs to 1 user\n    USERS ||--o{ COMMENTS : \"writes\"\n\n    %% 1 user can have many likes\n    USERS ||--o{ LIKES : \"likes\"\n\n    %% 1 user can make many reposts\n    USERS ||--o{ REPOSTS : \"makes\"\n\n    %% 1 post can have many comments; 1 comment belongs to 1 post\n    POSTS ||--o{ COMMENTS : \"has\"\n\n    %% 1 post can have many likes\n    POSTS ||--o{ LIKES : \"has\"\n\n    %% 1 post can be reposted many times\n    POSTS ||--o{ REPOSTS : \"is reposted\"\n\n    %% users follow many users (one-way)\n    USERS ||--o{ FOLLOWS : \"follows\"\n\n    %% 1 user can have many preferences\n    USERS ||--o{ USER_PREFERENCES : \"has preferences\"\n\n    %% FRIENDSHIPS: each row tracks requestor vs. acceptor\n    USERS ||--o{ FRIENDSHIPS : \"requests friendship\"\n    USERS ||--o{ FRIENDSHIPS : \"accepts friendship\"\n\n    %% 1 GENRE can have many POSTS\n    GENRES ||--o{ POSTS : \"categorizes\"\n\n    %% many-to-many: POSTS &amp; TAGS join through POST_TAGS\n    POSTS }o--o{ POST_TAGS : \"tagged by\"\n    TAGS }o--o{ POST_TAGS : \"tags many\"\n</code></pre>"},{"location":"development/diagrams/2.api/","title":"API Diagrams","text":""},{"location":"development/diagrams/2.api/#graphql-schema","title":"GraphQL Schema","text":"<p>This project is still in development and may change in the future. Be sure to check the latest version of the document.</p> <pre><code>########################################\n# TYPES\n########################################\n\ntype User {\n  id: ID!\n  email: String!\n  displayName: String\n  createdAt: String\n  updatedAt: String\n}\n\ntype Post {\n  id: ID!\n  userId: ID!\n  genreId: ID\n  quoteText: String!\n  mediaUrl: String\n  isPublic: Boolean\n  isArchived: Boolean\n  createdAt: String\n  updatedAt: String\n  user: User         \n  genre: Genre       \n  tags: [Tag]       \n  } \n\ntype Genre {\n  id: ID!\n  genreName: String!\n  description: String\n}\n\ntype Tag {\n  id: ID!\n  tagName: String!\n}\n\ntype Comment {\n  id: ID!\n  userId: ID!\n  postId: ID!\n  commentText: String!\n  createdAt: String\n  updatedAt: String\n  user: User\n  post: Post\n}\n\ntype Like {\n  id: ID!\n  userId: ID!\n  postId: ID!\n  createdAt: String\n}\n\ntype Follow {\n  followerId: ID!\n  followedId: ID!\n  createdAt: String\n}\n\ntype Repost {\n  id: ID!\n  userId: ID!\n  originalPostId: ID!\n  createdAt: String\n}\n\ntype Friendship {\n  id: ID!\n  requestorUserId: ID!\n  acceptorUserId: ID!\n  status: String\n  createdAt: String\n  updatedAt: String\n}\n\ntype UserPreferences {\n  id: ID!\n  userId: ID!\n  preferenceKey: String!\n  preferenceValue: String!\n  createdAt: String\n  updatedAt: String\n}\n\n########################################\n# QUERIES\n########################################\n\ntype Query {\n  # Users\n  getUser(id: ID!): User\n  getUsers: [User]\n\n  # Posts\n  getPost(id: ID!): Post\n  getPosts: [Post]\n\n  # Genres\n  getGenre(id: ID!): Genre\n  getGenres: [Genre]\n\n  # Tags\n  getTag(id: ID!): Tag\n  getTags: [Tag]\n\n  # Comments\n  getCommentsForPost(postId: ID!): [Comment]\n\n  # Follows\n  getFollows(userId: ID!): [Follow]\n\n  # Friendships\n  getFriendships(userId: ID!): [Friendship]\n\n  # Preferences\n  getUserPreferences(userId: ID!): [UserPreferences]\n}\n\n########################################\n# MUTATIONS\n########################################\n\ntype Mutation {\n  # User-related\n  createUser(email: String!, password: String!, displayName: String): User\n  loginUser(email: String!, password: String!): String \n\n  # Posts\n  createPost(userId: ID!, genreId: ID, quoteText: String!, mediaUrl: String, isPublic: Boolean): Post\n  archivePost(postId: ID!): Post\n  deletePost(postId: ID!): Boolean\n\n  # Comments\n  createComment(userId: ID!, postId: ID!, commentText: String!): Comment\n  deleteComment(commentId: ID!): Boolean\n\n  # Likes\n  likePost(userId: ID!, postId: ID!): Like\n  unlikePost(likeId: ID!): Boolean\n\n  # Reposts\n  repost(userId: ID!, originalPostId: ID!): Repost\n\n  # Follows\n  followUser(followerId: ID!, followedId: ID!): Follow\n  unfollowUser(followerId: ID!, followedId: ID!): Boolean\n\n  # Friendships\n  sendFriendRequest(requestorUserId: ID!, acceptorUserId: ID!): Friendship\n  respondFriendRequest(friendshipId: ID!, status: String!): Friendship\n\n  # Preferences\n  setUserPreference(userId: ID!, preferenceKey: String!, preferenceValue: String!): UserPreferences\n}\n</code></pre>"},{"location":"development/diagrams/3.uml/","title":"UML","text":"<p>This project is still in development and may change in the future. Be sure to check the latest version of the document.</p>"},{"location":"development/diagrams/3.uml/#class-diagrams","title":"Class Diagrams","text":""},{"location":"development/diagrams/3.uml/#users","title":"Users","text":"<pre><code>classDiagram\n    class User {\n        +String email\n        +String password\n        +String username\n        +String id\n        +createAccount()\n        +login()\n    }\n\n    class Account {\n        +String userId\n        +AuthType authType\n        +DateTime createdAt\n        +Boolean isVerified\n        +verifyEmail()\n        +updateProfile()\n    }\n\n    class OAuthProvider {\n        +String providerName\n        +String clientId\n        +String clientSecret\n        +authenticate()\n        +getAccessToken()\n        +getUserInfo()\n    }\n\n    class PinterestAuth {\n        +authenticate()\n        +getAccessToken()\n        +getUserInfo()\n    }\n\n    class SpotifyAuth {\n        +authenticate()\n        +getAccessToken()\n        +getUserInfo()\n    }\n\n    class EmailAuth {\n        +String email\n        +String hashedPassword\n        +validatePassword()\n        +hashPassword()\n        +sendVerificationEmail()\n    }\n\n    OAuthProvider &lt;|-- PinterestAuth\n    OAuthProvider &lt;|-- SpotifyAuth\n    User \"1\" -- \"1\" Account\n    Account -- EmailAuth\n    Account -- OAuthProvider\n\n\n</code></pre>"},{"location":"development/diagrams/3.uml/#posts","title":"Posts","text":"<pre><code>classDiagram\n    class Post {\n        -String id\n        -String userId\n        -String title\n        -String description\n        -List&lt;Tag&gt; tags\n        -List&lt;Media&gt; media\n        -boolean isPublic\n        -PostStatus status\n        -DateTime createdAt\n        -DateTime updatedAt\n        +create()\n        +delete()\n        +archive()\n        +repost()\n        +validatePost()\n    }\n\n    class PostService {\n        +createPost(PostDTO)\n        +deletePost(String postId, String userId)\n        +archivePost(String postId, String userId)\n        +repostPost(String postId, String userId)\n        -validateOwnership(String postId, String userId)\n    }\n\n    class PostRepository {\n        &lt;&lt;interface&gt;&gt;\n        +save(Post)\n        +findById(String)\n        +delete(String)\n        +updateStatus(String, PostStatus)\n        +createRepost(String, String)\n    }\n\n    class Media {\n        -String id\n        -String url\n        -MediaType type\n        -String postId\n    }\n\n    class Tag {\n        -String id\n        -String name\n    }\n\n    class PostStatus {\n        &lt;&lt;enumeration&gt;&gt;\n        ACTIVE\n        DELETED\n        ARCHIVED\n        REPOSTED\n    }\n\n    class MediaType {\n        &lt;&lt;enumeration&gt;&gt;\n        IMAGE\n        VIDEO\n    }\n\n    Post --&gt; PostStatus\n    Post \"1\" *-- \"*\" Media\n    Post \"1\" *-- \"*\" Tag\n    Post --&gt; PostService\n    PostService --&gt; PostRepository\n    Media --&gt; MediaType</code></pre>"},{"location":"development/diagrams/3.uml/#feed","title":"Feed","text":"<p><pre><code>classDiagram\n    class Feed {\n        -String userId\n        -List&lt;Post&gt; posts\n        -FeedPreferences preferences\n        +getFeed(page, size)\n        +refreshFeed()\n        +filterByTags(tags)\n    }\n\n    class RecommendationService {\n        -vectorStore: PgVector\n        +getRecommendations(userId)\n        -applyCollaborativeFiltering()\n        -applyContentBasedFiltering()\n        -combineResults()\n        -rankPosts()\n    }\n\n    class PgVector {\n        -Connection connection\n        +search(embedding, limit)\n        +insert(document, embedding)\n        +delete(id)\n        +update(id, embedding)\n    }\n\n    class FeedPreferences {\n        -String userId\n        -List&lt;String&gt; preferredTags\n        -List&lt;String&gt; blockedUsers\n        -List&lt;String&gt; followedUsers\n        -EmbeddingVector userEmbedding\n        +updatePreferences()\n    }\n\n    class Post {\n        -String id\n        -String content\n        -List&lt;String&gt; tags\n        -EmbeddingVector embedding\n        -DateTime createdAt\n        +generateEmbedding()\n    }\n\n    class EmbeddingVector {\n        -float[] vector\n        -int dimensions\n        +similarity(EmbeddingVector)\n        +normalize()\n    }\n\n    Feed --&gt; RecommendationService\n    RecommendationService --&gt; PgVector\n    Feed --&gt; FeedPreferences\n    RecommendationService --&gt; Post\n    Post --&gt; EmbeddingVector\n    FeedPreferences --&gt; EmbeddingVector</code></pre> SQL may look like this: <pre><code>CREATE EXTENSION IF NOT EXISTS vector;\n\nCREATE TABLE feed_preferences (\n    user_id UUID PRIMARY KEY,\n    preferred_tags TEXT[],\n    blocked_users UUID[],\n    followed_users UUID[],\n    user_embedding vector(384)\n);\n\nCREATE TABLE post_embeddings (\n    post_id UUID PRIMARY KEY,\n    embedding vector(384),\n    FOREIGN KEY (post_id) REFERENCES posts(id)\n);\n\nCREATE INDEX post_embedding_idx ON post_embeddings \nUSING ivfflat (embedding vector_cosine_ops)\nWITH (lists = 100);\n</code></pre></p>"},{"location":"development/diagrams/3.uml/#core-activity-diagrams","title":"Core Activity Diagrams","text":""},{"location":"development/diagrams/3.uml/#authentication-flow","title":"Authentication Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; CheckAuthStatus\n    CheckAuthStatus --&gt; ShowLoginForm: Not Authenticated\n    CheckAuthStatus --&gt; ShowMainFeed: Authenticated\n\n    ShowLoginForm --&gt; ValidateCredentials: Submit\n    ValidateCredentials --&gt; GenerateTokens: Valid\n    ValidateCredentials --&gt; ShowError: Invalid\n    ShowError --&gt; ShowLoginForm\n\n    GenerateTokens --&gt; StoreTokens\n    StoreTokens --&gt; ShowMainFeed\n    ShowMainFeed --&gt; [*]</code></pre>"},{"location":"development/diagrams/3.uml/#post-creation-flow","title":"Post Creation Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; InitiatePostCreation\n    InitiatePostCreation --&gt; ShowPostForm\n\n    ShowPostForm --&gt; ValidateContent: Submit\n    ValidateContent --&gt; ProcessMedia: Valid\n    ValidateContent --&gt; ShowValidationError: Invalid\n    ShowValidationError --&gt; ShowPostForm\n\n    ProcessMedia --&gt; GenerateEmbeddings\n    GenerateEmbeddings --&gt; SavePost\n    SavePost --&gt; UpdateFeed\n    UpdateFeed --&gt; [*]</code></pre>"},{"location":"development/diagrams/3.uml/#feed-generation-flow","title":"Feed Generation Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; ValidateRequest\n\n    ValidateRequest --&gt; CheckCache: Valid Request\n    ValidateRequest --&gt; ReturnError: Invalid Request\n\n    CheckCache --&gt; ReturnCachedFeed: Cache Hit\n    CheckCache --&gt; InitiateFeedGeneration: Cache Miss\n\n    state FeedGeneration {\n        [*] --&gt; LoadUserContext\n\n        state LoadUserContext {\n            [*] --&gt; FetchUserPreferences\n            FetchUserPreferences --&gt; FetchUserHistory\n            FetchUserHistory --&gt; BuildUserProfile\n        }\n\n        LoadUserContext --&gt; QueryContent\n\n        state QueryContent {\n            [*] --&gt; FetchRelevantPosts\n            FetchRelevantPosts --&gt; ApplyContentFilters\n            ApplyContentFilters --&gt; CalculateSimilarityScores\n        }\n\n        QueryContent --&gt; RankContent\n\n        state RankContent {\n            [*] --&gt; ApplyRecommendationModel\n            ApplyRecommendationModel --&gt; SortByRelevance\n            SortByRelevance --&gt; ApplyDiversityRules\n        }\n    }\n\n    InitiateFeedGeneration --&gt; FeedGeneration\n    FeedGeneration --&gt; OptimizeFeed\n\n    OptimizeFeed --&gt; PaginateResults\n    PaginateResults --&gt; CacheFeed\n    CacheFeed --&gt; ReturnFeed\n\n    ReturnFeed --&gt; [*]\n    ReturnError --&gt; [*]\n    ReturnCachedFeed --&gt; [*]\n\n    state ErrorHandling {\n        TimeoutError --&gt; ReturnError\n        ValidationError --&gt; ReturnError\n        DataError --&gt; ReturnError\n    }</code></pre>"},{"location":"development/diagrams/3.uml/#user-interaction-flow","title":"User Interaction Flow","text":"<pre><code>stateDiagram-v2\n    [*] --&gt; ViewPost\n\n    ViewPost --&gt; ProcessInteraction\n\n    state InteractionTypes &lt;&lt;choice&gt;&gt;\n    ProcessInteraction --&gt; InteractionTypes\n\n    InteractionTypes --&gt; Like: Like\n    InteractionTypes --&gt; Comment: Comment\n    InteractionTypes --&gt; Share: Share\n    InteractionTypes --&gt; Save: Save\n\n    Like --&gt; UpdateMetrics\n    Comment --&gt; UpdateMetrics\n    Share --&gt; UpdateMetrics\n    Save --&gt; UpdateMetrics\n\n    UpdateMetrics --&gt; RecalculateRecommendations\n    RecalculateRecommendations --&gt; [*]</code></pre>"},{"location":"development/diagrams/3.uml/#use-case-diagrams","title":"Use Case Diagrams","text":"<p>Core Actors - User: Regular application user - System: Automated processes</p>"},{"location":"development/diagrams/3.uml/#authentication-system","title":"Authentication System","text":"<pre><code>graph TD\n    User((User))\n    System((System))\n\n    subgraph Authentication\n        Login[Login]\n        Register[Register]\n        OAuth[OAuth Login]\n        Reset[Reset Password]\n    end\n\n    User --&gt; Login\n    User --&gt; Register\n    User --&gt; OAuth\n    User --&gt; Reset\n    System --&gt; OAuth</code></pre>"},{"location":"development/diagrams/3.uml/#content-management","title":"Content Management","text":"<pre><code>graph TD\n    User((User))\n\n    subgraph Posts\n        Create[Create Post]\n        Edit[Edit Post]\n        Delete[Delete Post]\n        Archive[Archive Post]\n    end\n\n    User --&gt; Create\n    User --&gt; Edit\n    User --&gt; Archive</code></pre>"},{"location":"development/diagrams/3.uml/#feed-generation","title":"Feed Generation","text":"<pre><code>graph TD\n    User((User))\n    System((System))\n\n    subgraph Feed\n        View[View Feed]\n        Filter[Filter Content]\n        Search[Search Posts]\n        Save[Save Posts]\n    end\n\n    User --&gt; View\n    User --&gt; Search\n    User --&gt; Save\n    System --&gt; Filter</code></pre>"},{"location":"development/diagrams/3.uml/#social-interactions","title":"Social Interactions","text":"<pre><code>graph TD\n    User((User))\n\n    subgraph Social\n        Like[Like Post]\n        Comment[Comment]\n        Share[Share Post]\n        Follow[Follow User]\n    end\n\n    User --&gt; Like\n    User --&gt; Comment\n    User --&gt; Share\n    User --&gt; Follow</code></pre>"},{"location":"development/roadmap/00overview/","title":"Project Development Roadmap","text":""},{"location":"development/roadmap/00overview/#overview","title":"Overview","text":"<p>This document describes the roadmap for the development of the project. It is a living document and will be updated as the project progresses. The timeline is subject to change as it is difficult to predict how long each phase will take. </p> <p>Our main goal is to build a skeleton of the project and then iterate on it to add more features and improve the existing ones. The project will be developed in phases, with each phase focusing on a specific aspect of the project.</p>"},{"location":"development/roadmap/00overview/#development-phases","title":"Development Phases","text":""},{"location":"development/roadmap/00overview/#initial-development","title":"Initial Development","text":"<ol> <li> <p>Phase 1: Setup and Planning (1 week)</p> <ul> <li>Define project goals and objectives</li> <li>Set up the development environment</li> <li>Create initial project structure and repository</li> </ul> </li> <li> <p>Phase 2: Authentication (2 weeks)</p> <ul> <li>Implement user registration and login</li> <li>Secure password storage</li> <li>Add social media login options</li> </ul> </li> <li> <p>Phase 3: User Management (2 weeks)</p> <ul> <li>Develop user profile management</li> <li>Implement user roles and permissions</li> <li>Create user settings page</li> </ul> </li> </ol>"},{"location":"development/roadmap/00overview/#core-functionality","title":"Core Functionality","text":"<ol> <li> <p>Phase 4: Post Feed Skeleton (2 weeks)</p> <ul> <li>Design the post feed layout</li> <li>Implement basic post feed functionality</li> <li>Display posts in chronological order</li> </ul> </li> <li> <p>Phase 5: Post Creation Skeleton (2 weeks)</p> <ul> <li>Develop post creation form</li> <li>Implement basic post submission</li> <li>Validate post content</li> </ul> </li> <li> <p>Phase 6: Post Feed and Post Creation Integration (2 weeks)</p> <ul> <li>Integrate post creation with post feed</li> <li>Ensure new posts appear in the feed</li> <li>Test post creation and display</li> </ul> </li> <li> <p>Phase 7: Post Feed and Post Creation Improvements (2 weeks)</p> <ul> <li>Enhance post feed UI/UX</li> <li>Add support for multimedia posts</li> <li>Improve post creation form</li> </ul> </li> </ol>"},{"location":"development/roadmap/00overview/#user-experience","title":"User Experience","text":"<ol> <li> <p>Phase 8: User Profile (2 weeks)</p> <ul> <li>Design user profile page</li> <li>Display user information and posts</li> <li>Allow profile customization</li> </ul> </li> <li> <p>Phase 9: Social Features (2 weeks)</p> <ul> <li>Implement follow and unfollow functionality</li> <li>Develop friends list feature</li> <li>Display followed users' posts in the feed</li> </ul> </li> <li> <p>Phase 10: Notifications (2 weeks)</p> <ul> <li>Implement real-time notifications</li> <li>Notify users of new followers, likes, and comments</li> <li>Create notification settings</li> </ul> </li> <li> <p>Phase 11: Messaging (2 weeks)</p> <ul> <li>Develop direct messaging feature</li> <li>Implement message notifications</li> <li>Allow users to send and receive messages</li> </ul> </li> </ol>"},{"location":"development/roadmap/00overview/#advanced-features","title":"Advanced Features","text":"<ol> <li> <p>Phase 12: Search (2 weeks)</p> <ul> <li>Implement search functionality</li> <li>Allow users to search for posts and users</li> <li>Optimize search performance</li> </ul> </li> <li> <p>Phase 13: Settings (2 weeks)</p> <ul> <li>Develop settings page</li> <li>Allow users to update account information</li> <li>Implement privacy and security settings</li> </ul> </li> <li> <p>Phase 14: Post Feed Prediction Algorithm (3+ weeks)</p> <ul> <li>Develop algorithm to predict user preferences</li> <li>Display personalized post feed</li> <li>Continuously improve prediction accuracy</li> </ul> </li> <li> <p>Phase 15: Post Feed and Post Creation Improvements (2+ weeks)</p> <ul> <li>Further enhance post feed and creation features</li> <li>Add advanced post filtering options</li> <li>Improve overall performance and usability</li> </ul> </li> <li> <p>Phase 16: Cache Layer (2+ weeks)</p> <ul> <li>Implement caching for improved performance</li> <li>Cache frequently accessed data</li> <li>Optimize cache invalidation strategies</li> </ul> </li> </ol>"},{"location":"development/roadmap/00overview/#timeline-summary","title":"Timeline Summary","text":"<p>The estimated total development time is approximately 32+ weeks, subject to change based on project requirements and available resources.</p>"},{"location":"development/roadmap/00overview/#next-steps","title":"Next Steps","text":"<p>After completing these phases, we will evaluate the product and determine further improvements based on user feedback and performance metrics.</p>"},{"location":"development/roadmap/01todos/","title":"Backlog and Sprint Plan","text":""},{"location":"development/roadmap/01todos/#backlog","title":"Backlog","text":"<ol> <li> <p>Setup and Planning</p> <ul> <li>As a developer, I want to define project goals and objectives so that the team has a clear direction.</li> <li>As a developer, I want to set up the development environment so that we can start coding.</li> <li>As a developer, I want to create the initial project structure and repository so that the project is organized from the start.</li> </ul> </li> <li> <p>Authentication</p> <ul> <li>As a user, I want to register an account so that I can access the platform.</li> <li>As a user, I want to log in to my account so that I can use the platform's features.</li> <li>As a user, I want my password to be stored securely so that my account is protected.</li> <li>As a user, I want to log in using my social media accounts so that I can access the platform easily.</li> </ul> </li> <li> <p>User Management</p> <ul> <li>As a user, I want to manage my profile so that I can update my personal information.</li> <li>As an admin, I want to assign roles and permissions so that users have appropriate access.</li> <li>As a user, I want a settings page so that I can customize my account preferences.</li> </ul> </li> <li> <p>Post Feed Skeleton</p> <ul> <li>As a user, I want to see a feed of posts so that I can stay updated with new content.</li> <li>As a user, I want the posts to be displayed in chronological order so that I can see the latest updates first.</li> </ul> </li> <li> <p>Post Creation Skeleton</p> <ul> <li>As a user, I want to create a new post so that I can share content with others.</li> <li>As a user, I want to submit my post easily so that it appears in the feed.</li> <li>As a user, I want my post content to be validated so that it meets the platform's standards.</li> </ul> </li> <li> <p>Post Feed and Post Creation Integration</p> <ul> <li>As a user, I want my new posts to appear in the feed immediately so that others can see them.</li> <li>As a developer, I want to test post creation and display to ensure it works correctly.</li> </ul> </li> <li> <p>Post Feed and Post Creation Improvements</p> <ul> <li>As a user, I want an enhanced post feed UI/UX so that it is visually appealing and easy to use.</li> <li>As a user, I want to add multimedia to my posts so that I can share images and videos.</li> <li>As a user, I want an improved post creation form so that it is user-friendly.</li> </ul> </li> <li> <p>User Profile</p> <ul> <li>As a user, I want a profile page so that others can see my information and posts.</li> <li>As a user, I want to customize my profile so that it reflects my personality.</li> </ul> </li> <li> <p>Follow, Friends etc</p> <ul> <li>As a user, I want to follow and unfollow other users so that I can control my feed.</li> <li>As a user, I want a friends list so that I can easily connect with people I know.</li> <li>As a user, I want to see posts from users I follow in my feed so that I stay updated with their content.</li> </ul> </li> <li> <p>Notifications         - As a user, I want real-time notifications so that I am alerted to new activities.         - As a user, I want to be notified of new followers, likes, and comments so that I stay engaged.         - As a user, I want to customize my notification settings so that I control what I am notified about.</p> </li> <li> <p>Messaging         - As a user, I want to send and receive direct messages so that I can communicate privately.         - As a user, I want message notifications so that I know when I receive a new message.</p> </li> <li> <p>Search         - As a user, I want to search for posts and users so that I can find specific content.         - As a user, I want the search to be fast and accurate so that I get relevant results quickly.</p> </li> <li> <p>Settings         - As a user, I want a settings page so that I can update my account information.         - As a user, I want to manage my privacy and security settings so that I control my data.</p> </li> </ol>"},{"location":"development/roadmap/01todos/#sprint-plan","title":"Sprint Plan","text":""},{"location":"development/roadmap/01todos/#sprint-1-1-week","title":"Sprint 1 (1 week)","text":"<ul> <li>Define project goals and objectives</li> <li>Set up the development environment</li> <li>Create initial project structure and repository</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-2-2-weeks","title":"Sprint 2 (2 weeks)","text":"<ul> <li>Implement user registration and login</li> <li>Secure password storage</li> <li>Add social media login options</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-3-2-weeks","title":"Sprint 3 (2 weeks)","text":"<ul> <li>Develop user profile management</li> <li>Implement user roles and permissions</li> <li>Create user settings page</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-4-2-weeks","title":"Sprint 4 (2 weeks)","text":"<ul> <li>Design the post feed layout</li> <li>Implement basic post feed functionality</li> <li>Display posts in chronological order</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-5-2-weeks","title":"Sprint 5 (2 weeks)","text":"<ul> <li>Develop post creation form</li> <li>Implement basic post submission</li> <li>Validate post content</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-6-2-weeks","title":"Sprint 6 (2 weeks)","text":"<ul> <li>Integrate post creation with post feed</li> <li>Ensure new posts appear in the feed</li> <li>Test post creation and display</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-7-2-weeks","title":"Sprint 7 (2 weeks)","text":"<ul> <li>Enhance post feed UI/UX</li> <li>Add support for multimedia posts</li> <li>Improve post creation form</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-8-2-weeks","title":"Sprint 8 (2 weeks)","text":"<ul> <li>Design user profile page</li> <li>Display user information and posts</li> <li>Allow profile customization</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-9-2-weeks","title":"Sprint 9 (2 weeks)","text":"<ul> <li>Implement follow and unfollow functionality</li> <li>Develop friends list feature</li> <li>Display followed users' posts in the feed</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-10-2-weeks","title":"Sprint 10 (2 weeks)","text":"<ul> <li>Implement real-time notifications</li> <li>Notify users of new followers, likes, and comments</li> <li>Create notification settings</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-11-2-weeks","title":"Sprint 11 (2 weeks)","text":"<ul> <li>Develop direct messaging feature</li> <li>Implement message notifications</li> <li>Allow users to send and receive messages</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-12-2-weeks","title":"Sprint 12 (2 weeks)","text":"<ul> <li>Implement search functionality</li> <li>Allow users to search for posts and users</li> <li>Optimize search performance</li> </ul>"},{"location":"development/roadmap/01todos/#sprint-13-2-weeks","title":"Sprint 13 (2 weeks)","text":"<ul> <li>Develop settings page</li> <li>Allow users to update account information</li> <li>Implement privacy and security settings</li> </ul>"}]}